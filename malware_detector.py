from loguru import logger

has_privacy_stealing = "has_privacy_stealing"
has_sms_or_call = "has_sms_or_call"
has_remote_control = "has_remote_control"
has_bank_stealing = "has_bank_stealing"
has_stealthy_download = "has_stealthy_download"
has_ransom = "has_ransom"
has_privilege_escalation = "has_privilege_escalation"

F_ZNIU = "ZNIU"
F_ROOTSTV = "ROOTSTV"
F_Slocker = "Slocker"
F_XLoader = "XLoader"

T_Rooting = "Rooting"
T_Exploit = "Exploit"
T_Ransomware = "Ransomware"
T_TrojanBanker = "Trojan-banker"

rules = {
            T_Rooting: {
                "family": F_ZNIU,
                "features": [
                    has_privacy_stealing,
                    has_sms_or_call,
                    has_remote_control,
                    has_privilege_escalation,
                ]
            },
            T_Exploit: {
                "family": F_ROOTSTV,
                "features": [
                    has_remote_control,
                    has_stealthy_download,
                    has_privilege_escalation,
                ]
            },
            T_Ransomware: {
                "family": F_Slocker,
                "features": [
                    has_ransom,
                ]
            },
            T_TrojanBanker: {
                "family": F_XLoader,
                "features": [
                    has_privacy_stealing,
                    has_sms_or_call,
                    has_remote_control,
                    has_bank_stealing,
                    has_stealthy_download,
                    has_privilege_escalation,
                ]
            },
        }


class MalwareDetector:
    def __init__(self, app_path: str):
        self.app_path = app_path
        self.identified_features = {}
        self.family = "unknown"
        self.type = "unknown"

    def run(self):
        self.identified_features = {
            has_privacy_stealing: self.has_privacy_stealing(),
            has_sms_or_call: self.has_sms_or_call(),
            has_remote_control: self.has_remote_control(),
            has_bank_stealing: self.has_bank_stealing(),
            has_stealthy_download: self.has_stealthy_download(),
            has_ransom: self.has_ransom(),
            has_privilege_escalation: self.has_privilege_escalation(),
        }

        _family, _typ = self.match_family_and_types()
        return self.identified_features, _family, _typ

    def match_family_and_types(self):
        found_family, found_typ = '', ''
        true_keys = [k for k, v in self.identified_features.items() if v]
        for _typ, rule in rules.items():
            if set(rule['features']).issubset(set(true_keys)):
                found_family = rule['family']
                found_typ = _typ
                break

        return found_family, found_typ

    def has_privacy_stealing(self) -> bool:
        logger.debug(f"detecting feature: [privacy_stealing] for app: {self.app_path}")
        return False

    def has_sms_or_call(self) -> bool:
        logger.debug(f"detecting feature: [sms_or_call] for app: {self.app_path}")
        return False

    def has_remote_control(self) -> bool:
        logger.debug(f"detecting feature: [remote_control] for app: {self.app_path}")
        return False

    def has_bank_stealing(self) -> bool:
        logger.debug(f"detecting feature: [bank_stealing] for app: {self.app_path}")
        return False

    def has_stealthy_download(self) -> bool:
        logger.debug(f"detecting feature: [stealthy_download] for app: {self.app_path}")
        return False

    def has_ransom(self) -> bool:
        logger.debug(f"detecting feature: [ransom] for app: {self.app_path}")
        return False

    def has_privilege_escalation(self) -> bool:
        logger.debug(f"detecting feature: [privilege_escalation] for app: {self.app_path}")
        return False


if __name__ == "__main__":
    detector = MalwareDetector("/test/test.apk")
    idf, family, typ = detector.run()
    print(f"idf: {idf}\nfamily: {family}\ntype: {typ}")